unit form_principal;
 //DaMoRaDEV, SDK VeriFactu 0.1.0
interface

uses
  System.SysUtils,
  System.Variants,
  System.Classes,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  Vcl.StdCtrls,
  Vcl.ExtCtrls,
  xml.XMLDoc,
  activex,
  xml.XMLIntf, Xml.xmldom, Xml.Win.msxmldom, Vcl.Imaging.pngimage;

type
  TFormPpal = class(TForm)
    MemoLogs: TMemo;
    panelBotones: TPanel;
    cboxHayFacturasRectificadas: TCheckBox;
    cboxHayFacturasSustituidas: TCheckBox;
    btnGenerarXMLCabecera: TButton;
    btnXMLFactura: TButton;
    btnXMLEventos: TButton;
    codigoQR: TImage;
    btnGenerarQR: TButton;
    btnFirmar: TButton;
    btnHuella: TButton;
    cboxHayDestinatarios: TCheckBox;
    cboxHayRequerimientoEAT: TCheckBox;
    procedure btnGenerarXMLCabeceraClick(Sender: TObject);
    procedure btnXMLFacturaClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FormPpal: TFormPpal;

implementation

{$R *.dfm}
uses
  clase_cabecera, clase_RegistroAlta,clase_XMLFactura,clase_ImporteRectificacion,
  clase_Tercero,clase_Destinatarios,
  clase_IDFactura, clase_FacturasRectificadas,clase_FacturasSustituidas;

procedure TFormPpal.btnGenerarXMLCabeceraClick(Sender: TObject);
var
  cabecera: TCabecera;
begin
  try
    cabecera := TCabecera.Create('Empresa Test', '12345678Z');
   { cabecera.UsaRepresentante := true;
    Cabecera.SETRepresentanteNombre('Nombre Representante');
    Cabecera.SETRepresentanteNIF('12345678Z') ;
    Cabecera.SETIncidencia(true);
    Cabecera.RequeridoPorEAT:=true;
    Cabecera.SETFechaFinVerifactu(now);  }
    MemoLogs.Lines.Add('Cabecera Creada');
    Memologs.Lines.Text := cabecera.CrearXML.XML.Text;
  except
    on E: Exception do
      MemoLogs.Lines.Add('Error: ' + E.ToString);
  end;

end;


procedure TFormPpal.btnXMLFacturaClick(Sender: TObject);
var
  cabecera: TCabecera;
  RegAlta: TRegistroAlta;
  IDFactura: TIDFactura;
  FacturasRectificadas: TFacturasRectificadas;
  FacturasSustituidas :TFacturasSustiuidas;
  ImporteRectificacion:TImporteRectificacion;
  XMLFactura:TXMLFactura;
  Tercero:TTercero;
  Destinatarios:TDestinatarios;
begin
  XMLFactura := nil;
   try
     FormatDateTime('dd-mm-yyyy',now);
     cabecera := TCabecera.Create('Empresa Test', '12345678Z');
     IDFactura := TIDFactura.Create('12345678Z','fact001test');
     Tercero := TTercero.Create(False);
     // facturas Rectificadas
     if Assigned(cboxHayFacturasRectificadas) and (cboxHayFacturasRectificadas.Checked = true) then
          begin
           // acces violation, sevisar los constructores
           FacturasRectificadas := TFacturasRectificadas.Create(true,'12345678Z','111Facsustituida',now);
           ImporteRectificacion := TImporteRectificacion.create(true,10.50,5.60,16.20 );
          end
     else
          Begin
             FacturasRectificadas := TFacturasRectificadas.Create(false);
             ImporteRectificacion := TImporteRectificacion.Create(false);
          End;
     // facturas sustituidas
     if cboxHayFacturasSustituidas.Checked = true then
            FacturasSustituidas:= TFacturasSustiuidas.Create(True,'12345678Z','1234factsustituida',now)
     else  FacturasSustituidas := TFacturasSustiuidas.Create(false) ;
     //destinatarios
     if cboxHayDestinatarios.Checked = true  then
            Destinatarios := TDestinatarios.Create(true,'Destinatario1','12345678Z',1)
     else Destinatarios := TDestinatarios.Create(false);
     // Hay Requerimiento
     if cboxHayrequerimientoEAT.Checked = true then
          Begin
            Cabecera.RequeridoPorEAT:=true;
            Cabecera.RemisionRequerimiento_RefRequerimiento:=' ref requerimiento';
            Cabecera.RemisionRequerimiento_FinRequerimiento:='S'; //s o N
          End;
     //ShowMessage(' tercero') ;
     RegAlta := TRegistroAlta.Create('Empresa Test',IDFactura,'refext001',fF2,FacturasRectificadas,FacturasSustituidas,Tercero,Destinatarios,ImporteRectificacion);
     RegAlta.DescripcionOperacion:='Venta minorista en factura simplificada';
     RegAlta.FacturaSinIdentifDestinatarioArt61d:='N';
     RegAlta.FacturaSimplificadaArt7273:='N';
     RegAlta.EmitidaPorTerceroDestinatario:='N';
     RegAlta.Macrodato:='N';
     //Creacion de la factura
     Memologs.Lines.Text := XMLFactura.GenearXML(1,Cabecera,RegAlta).XML.Text;
   except
        on E:Exception do raise Exception.Create('Error XML Factura : '+E.ToString);
   end;
    RegAlta.Free; // libera todas las clases en su destructor
end;








end.
